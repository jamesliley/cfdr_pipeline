*****************************************************************
*--  Data and code to reproduce figures and results in paper  --*
*--                                                           --*
*--  'Accurate error control in high dimensional association  --*
*--  testing using conditional false discovery rates'         --*
*--                                                           --*
*--                                                           --*
*--  James Liley and Chris Wallace, 2020                      --*
*--  Correspondence: JL, james.liley@igmm.ed.ac.uk            --*
*****************************************************************

This folder contains descriptions of how all simulations were 
generated, and instructions to reproduce any individual 
simulation result. Simulation results are stored in nine matrices
in folder data/sim* (see main README) with each matrix 
corresponding to a different protocol. 

Please also see code/reproducibility_check for an implementation
of the reproducibility commands.
 
This readme is organised according to these nine matrices. For 
each matrix, we firstly describe a typical command used to 
generate a new (random) simulation under the appropriate 
protocol, and secondly describe a command to regenerate a given 
row of the matrix. For interpretation of matrix columns, please 
see data/README.txt.

Instructions for reproduction can be interpreted as follows: 
given a row of a matrix, denote X[i] as the ith field, and 
interpret X[i,j,k] as X[i] X[j] X[k] (ie elements separated by 
spaces).

Instructions for generation sometimes require explicit 
specification of parameters, so random parameter selection must 
be performed prior to invoking the R script. We specify how this 
was done using R functions.

Please note that this document is a guide, and will not work as
either a shell script or an R script.



*****************************************************************
*--  R functions to sample from conditional distributions     --*
*****************************************************************

## Samples from the usual parameter distribution conditioned on 
##  n1p=0, n1pq=0 (no associations with P)
getnullpars=function() {
distx=sample(3,1)  # 1 for normal, 2 for t (3df), 3 for Cauchy

 nhyp=round(10^runif(1,3,4)) 
  
 n1p=0 # number of variables associated ONLY with P (principal)
 n1q=sample(200,1) # number of variables associated ONLY with Q (conditional)
 n1pq=0 # number of variables associated with both
  
 sp=1
 sq=runif(1,1.5,3) # scale of effect size distribution for associations with B

 pars=paste(nhyp,n1p, n1q,n1pq,round(sp,digits=2),round(sq,digits=2),distx,sep=" ")
 return(pars)
}

## Samples from the usual parameter distribution conditioned on 
##  n1pq=0 (no shared associations between P and Q)
getindpars=function() {
distx=sample(3,1)  # 1 for normal, 2 for t (3df), 3 for Cauchy

 nhyp=round(10^runif(1,3,4)) 
  
 n1p=sample(200,1) # number of variables associated ONLY with P (principal)
 n1q=sample(200,1) # number of variables associated ONLY with Q (conditional)
 n1pq=0 # number of variables associated with both

 sp=1
 sq=runif(1,1.5,3) # scale of effect size distribution for associations with B

 pars=paste(nhyp,n1p, n1q,n1pq,round(sp,digits=2),round(sq,digits=2),distx,sep=" ")
 return(pars)
}



*****************************************************************
*--  sim_mat_high_fdr.txt                                     --*
*****************************************************************

# Random simulation:
RScript run_simulation.R 

# Reproduce simulation:
RScript run_simulation.R X[1]



*****************************************************************
*--  sim_mat_high_fdr_null.txt                                --*
*****************************************************************

# Random simulation:
# Let R0 be a vector generated by getnullpars()
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 R0

# Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 0 0 0.1 X[3,6,7,8,9,10,4]



*****************************************************************
*--  sim_mat_low_fdr.txt                                      --*
*****************************************************************

# Random simulation:
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.01

# Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 0 0 0.01



*****************************************************************
*--  sim_mat_low_fdr_null.txt                                --*
*****************************************************************

# Random simulation:
# Let R0 be a vector generated by getnullpars()
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.01 R0

# Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 0 0 0.01 X[3,6,7,8,9,10,4]



*****************************************************************
*--  sim_fixed.txt                                            --*
*****************************************************************

# Random simulation: one of
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 5000 100 100 100 2 2 2       # Reference
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 5000 0 0 0 1 1 1             # No effects
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 5000 100 100 100 1.5 1.5 1   # Weak effects
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 5000 100 100 100 3 3 3       # Large variance in effect sizes
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 10000 100 100 100 2 2 2      # As above, larger n
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 1000 100 100 100 2 2 2       # As above, smaller n
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 5000 150 150 0 2 2 2         # No non-null hypotheses shared
RScript run_simulation.R 0 1111111111 1111 2 0 0 0.1 5000 0 0 200 2 2 1           # No unique hypotheses
RScript run_simulation.R 0 1111111111 1111 2 2 0.05 0.1 5000 2000 2000 0 2 2 2    # Negative information
RScript run_simulation.R 0 1111111111 1111 2 1 0.05 0.1 5000 100 100 100 2 2 2    # Block correlation
RScript run_simulation.R 0 1111111111 1111 2 2 0.05 0.1 5000 100 100 100 2 2 2    # Equicorrelation

# Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 X[21] X[22] 0.01 X[3,6,7,8,9,10,4]




*****************************************************************
*--  sim_cov.txt                                              --*
*****************************************************************

Random simulation: 
one of
RScript run_simulation.R 0 0100000000 0011 2 1 0.01 0.1 # Block correlation, rho=0.01
RScript run_simulation.R 0 0100000000 0011 2 1 0.01 0.1 # Equicorrelation, rho=0.01
RScript run_simulation.R 0 0100000000 0011 2 2 0.1 0.1  # Block correlation, rho=0.1
RScript run_simulation.R 0 0100000000 0011 2 2 0.1 0.1  # Equicorrelation, rho=0.1

Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 X[21] X[22] 0.01



*****************************************************************
*--  sim_cov_null.txt                                         --*
*****************************************************************

# Random simulation: 
# Let R0 be a vector generated by getnullpars()
# One of
RScript run_simulation.R 0 0100000000 0011 2 1 0.01 0.1 R0 # Block correlation, rho=0.01
RScript run_simulation.R 0 0100000000 0011 2 1 0.01 0.1 R0 # Equicorrelation, rho=0.01
RScript run_simulation.R 0 0100000000 0011 2 2 0.1 0.1 R0  # Block correlation, rho=0.1
RScript run_simulation.R 0 0100000000 0011 2 2 0.1 0.1 R0  # Equicorrelation, rho=0.1

Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 X[21] X[22] 0.1 X[3,6,7,8,9,10,4]




*****************************************************************
*--  sim_unrelated.txt                                        --*
*****************************************************************

# Random simulation: 
# Let I0 be a vector generated by getindpars()
RScript run_simulation.R 0 0100000000 0011 2 1 0 0 I0 

Reproduce simulation:
RScript run_simulation.R X[1] 1111111111 1111 2 0 0 0.1 X[3,6,7,8,9,10,4]




*****************************************************************
*--  sim_parametric_adjustment.txt                            --*
*****************************************************************

## FIRSTLY, all calls to vlx in the script run_simulation.R must be changed from
##  vlx(...,adj=1,...) to vlx(...,adj=2,...)

# Random simulation
# Parameters for these simulations are not chosen randomly- they are matched to sim_gen_high_fdr.txt

# Reproduce simulation
RScript run_sim_paradj.R X[1] 0000010000 0011



